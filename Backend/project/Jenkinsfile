pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'app'
        DOCKER_REGISTRY = 'haquocviet'
        PATH = "${tool 'Docker'}/bin:${env.PATH}:~/.local/bin"
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    def dockerHome = tool 'Docker'
                    env.PATH = "${dockerHome}/bin:${env.PATH}:~/.local/bin"
                }
            }
        }
        stage('Install Docker Compose') {
            steps {
                dir('Backend/project') {
                    script {
                        def dockerComposeInstalled = sh(script: 'command -v docker-compose', returnStatus: true) == 0

                        if (!dockerComposeInstalled) {
                            echo 'Docker Compose not found, installing...'
                            sh '''
                                curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
                                chmod +x ~/docker-compose
                                mkdir -p ~/.local/bin
                                mv ~/docker-compose ~/.local/bin/docker-compose
                            '''
                        } else {
                            echo 'Docker Compose is already installed.'
                        }
                        sh 'export PATH=$PATH:~/.local/bin:/var/jenkins_home/.local/bin'
                        sh '~/.local/bin/docker-compose --version'
                    }
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/viet']],
                    userRemoteConfigs: [
                        [url: 'git@github.com:haquocviet261/PetShopServer.git']
                    ]
                ])
            }
        }
        stage('Build') {
            steps {
                dir('Backend/project') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean install'
                }
            }
        }
        stage('Debug') {
            steps {
                sh 'echo $PATH'
                sh 'ls -l /usr/local/bin/docker'
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('Backend/project') {
                    script {
                        sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'haquocviet', toolName: 'Docker', url: 'https://index.docker.io/v1/') {
                        sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                        sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                dir('Backend/project') {
                    script {
                        sh '''
                            export PATH=$PATH:~/.local/bin:/var/jenkins_home/.local/bin
                            if ! command -v docker-compose; then echo "docker-compose not found"; exit 1; fi
                            docker-compose down || true
                            docker-compose up -d
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Build successfully!'
        }
        failure {
            echo 'Build failed!'
        }
        always {
            script {
                sh "docker rm -f app || true"
                sh "docker rmi ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${env.BUILD_NUMBER} || true"
            }
        }
    }
}
