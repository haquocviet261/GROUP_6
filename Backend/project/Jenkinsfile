pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'app'
        DOCKER_REGISTRY = 'haquocviet'

    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    def dockerHome = tool 'Docker'
                    env.PATH = "${dockerHome}/bin:${env.PATH}"
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/viet']],
                    userRemoteConfigs: [
                        [url: 'git@github.com:haquocviet261/PetShopServer.git']
                    ]
                ])
            }
        }
        stage('Build') {
            steps {
                dir('Backend/project') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean install'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('Backend/project') {
                    script {
                        sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Push Docker image lÃªn Docker registry
                    withDockerRegistry(credentialsId: 'haquocviet', toolName: 'Docker', url: 'https://index.docker.io/v1/') {
                        sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                        sh "docker push haquocviet/${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                    }

                }
            }
        }
        stage('Deploy') {
            steps {
                dir('Backend/project') {
                    script {
                        sh 'docker-compose down'
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build successfully!'
        }
        failure {
            echo 'Build failed!'
        }
        always {
            script {
                sh "docker rm -f app || true"
                sh "docker rmi ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${env.BUILD_NUMBER} || true"
            }
        }
    }
}
