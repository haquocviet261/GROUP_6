pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DOCKER_REGISTRY = 'haquocviet'
        PATH = "${tool 'Docker'}/bin:${env.PATH}:~/.local/bin"
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    def dockerHome = tool 'Docker'
                    env.PATH = "${dockerHome}/bin:${env.PATH}:~/.local/bin"
                }
            }
        }
        stage('Checkout') {
            steps {
                dir('/var/jenkins_home/workspace/Pet_Shop_Server') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/viet']],
                        userRemoteConfigs: [
                            [url: 'git@github.com:haquocviet261/PetShopServer.git']
                        ]
                    ])
                }
            }
        }
        stage('Build') {
            steps {
                dir('Backend/project') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean install'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('Backend/project') {
                    script {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    }
                }
            }
        }
        stage('Clean Up Old Images') {
            steps {
                script {
                    // Get the list of images for the repository excluding the latest one
                    def imagesToRemove = sh(script: "docker images ${DOCKER_IMAGE} --format '{{.Repository}}:{{.Tag}}' | grep -v ${DOCKER_TAG}", returnStdout: true).trim()
                    if (imagesToRemove) {
                        sh "echo '${imagesToRemove}' | xargs -r docker rmi"
                    }
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    // Stop and remove any existing container
                    sh """
                    docker stop ${DOCKER_IMAGE} || true
                    docker rm ${DOCKER_IMAGE} || true
                    """
                    // Run the new container, mapping internal port 9999 to external port 9999
                    sh "docker run -d --name ${DOCKER_IMAGE} -p 9999:9999 ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
    }
    post {
        success {
            echo 'Build successfully!'
        }
        failure {
            echo 'Build failed!'
        }

    }
}
