pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        IMAGE_NAME = "${DOCKER_IMAGE}:${DOCKER_TAG}"
        PREV_IMAGE_NAME = "${DOCKER_IMAGE}:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                dir('/var/jenkins_home/workspace/Pet_Shop_Server') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/viet']],
                        userRemoteConfigs: [[url: 'git@github.com:haquocviet261/PetShopServer.git']]
                    ])
                }
            }
        }

        stage('Build') {
            steps {
                dir('Backend/project') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean install'
                }
            }
        }

        stage('Clean Up Old Images') {
            steps {
                script {
                    // Remove old images that are not in use by any container
                    sh """
                    docker images ${DOCKER_IMAGE} --format '{{.Repository}}:{{.Tag}}' | grep -v ${DOCKER_TAG} | xargs -r docker rmi
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('Backend/project') {
                    script {
                        sh "docker build -t ${IMAGE_NAME} ."
                    }
                }
            }
        }

        stage('Clean Up Old Containers') {
            steps {
                script {
                    // Stop and remove any existing container with the name
                    sh """
                    docker stop ${DOCKER_IMAGE} || true
                    docker rm ${DOCKER_IMAGE} || true
                    """
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the new container
                    sh "docker run -d --name ${DOCKER_IMAGE} -p 9999:9999 ${IMAGE_NAME}"
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
            // Tag the newly built image as 'latest'
            sh "docker tag ${IMAGE_NAME} ${DOCKER_IMAGE}:latest"
        }

        failure {
            echo 'Build or deployment failed!'
        }

        always {
            script {
                // Remove old images after tagging the new one as 'latest'
                sh """
                docker images ${DOCKER_IMAGE} --format '{{.Repository}}:{{.Tag}}' | grep -v ${DOCKER_TAG} | xargs -r docker rmi || true
                """
            }
        }
    }
}
