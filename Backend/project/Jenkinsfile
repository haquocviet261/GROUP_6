pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'app'
        DOCKER_REGISTRY = 'haquocviet'
        PATH = "${tool 'Docker'}/bin:${env.PATH}:~/.local/bin"
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    def dockerHome = tool 'Docker'
                    env.PATH = "${dockerHome}/bin:${env.PATH}:~/.local/bin"
                }
            }
        }
        stage('Checkout') {
            steps {
                dir('/var/jenkins_home/workspace/Pet_Shop_Server') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/viet']],
                        userRemoteConfigs: [
                            [url: 'git@github.com:haquocviet261/PetShopServer.git']
                        ]
                    ])
                }
            }
        }
        stage('Build') {
            steps {
                dir('Backend/project') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean install'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('Backend/project') {
                    script {
                        sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }
        stage('Clean Up') {
            steps {
                script {
                    // Stop and remove any existing container
                    sh """
                    docker stop ${DOCKER_IMAGE} || true
                    docker rm ${DOCKER_IMAGE} || true
                    """
                    // Remove the old image
                    sh "docker rmi ${DOCKER_IMAGE}:previous || true"
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    // Run the new container, mapping internal port 9999 to external port 9999
                    sh "docker run -d --name ${DOCKER_IMAGE} -p 9999:9999 ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                }
            }
        }
    }
    post {
        success {
            echo 'Build successfully!'
            // Tag the newly built image as the latest image
            sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
        }
        failure {
            echo 'Build failed!'
        }
        always {
            script {
                // Optionally remove old images
                sh "docker rmi ${DOCKER_IMAGE}:${env.BUILD_NUMBER} || true"
            }
        }
    }
}
